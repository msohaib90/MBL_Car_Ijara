<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RPA API Testing" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Auth &amp; eCIB Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Auth" elementType="Argument">
              <stringProp name="Argument.name">Auth</stringProp>
              <stringProp name="Argument.value">/authenticate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Auth API Path</stringProp>
            </elementProp>
            <elementProp name="eCIB" elementType="Argument">
              <stringProp name="Argument.name">eCIB</stringProp>
              <stringProp name="Argument.value">/eCIB_Consumer</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">eCIB API Path</stringProp>
            </elementProp>
            <elementProp name="Username" elementType="Argument">
              <stringProp name="Argument.name">Username</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">Admin</stringProp>
              <stringProp name="Argument.desc">Authenticator API</stringProp>
            </elementProp>
            <elementProp name="Password" elementType="Argument">
              <stringProp name="Argument.name">Password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">Admin123@</stringProp>
              <stringProp name="Argument.desc">Authenticator API</stringProp>
            </elementProp>
            <elementProp name="LOSRequestRefNo" elementType="Argument">
              <stringProp name="Argument.name">LOSRequestRefNo</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">LOS1234</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="Product" elementType="Argument">
              <stringProp name="Argument.name">Product</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">House Finance</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="NewCnic" elementType="Argument">
              <stringProp name="Argument.name">NewCnic</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">12345-1234567-1</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="OldCnic" elementType="Argument">
              <stringProp name="Argument.name">OldCnic</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">123-12-123456</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="PassPortNo" elementType="Argument">
              <stringProp name="Argument.name">PassPortNo</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">ED9918513</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="DOB" elementType="Argument">
              <stringProp name="Argument.name">DOB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">02-Dec-2002</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="NTN" elementType="Argument">
              <stringProp name="Argument.name">NTN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">9187414</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="Name" elementType="Argument">
              <stringProp name="Argument.name">Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">Muhammad Usman</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="Street" elementType="Argument">
              <stringProp name="Argument.name">Street</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">Street # 4 F9 Block</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="HouseNo" elementType="Argument">
              <stringProp name="Argument.name">HouseNo</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">House # F 9025</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="City" elementType="Argument">
              <stringProp name="Argument.name">City</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">Islamabad</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
            <elementProp name="Mohalla_Village" elementType="Argument">
              <stringProp name="Argument.name">Mohalla_Village</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">Green Area</stringProp>
              <stringProp name="Argument.desc">eCIB</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">6a666dc1-701f-4f0e-a258-f32066cd8dd0.mock.pstmn.io</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-api-key" elementType="Header">
              <stringProp name="Header.name">x-api-key</stringProp>
              <stringProp name="Header.value">PMAK-64d21e95b740110043a27ec9-8abf3f163569f4cf5dea38ff64be13acb8</stringProp>
            </elementProp>
            <elementProp name="access_token" elementType="Header">
              <stringProp name="Header.name">access_token</stringProp>
              <stringProp name="Header.value">${Auth_Token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AUTH_API_Happy_Flow" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticator API" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;${Username}&quot;,&#xd;
    &quot;Password&quot;: &quot;${Password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${Auth}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Auth Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Auth_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Description" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1244765308">&quot;StatusDescription&quot;: &quot;OK&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Status Description is Bad Request</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Token Details" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1938933922">access_token</stringProp>
                <stringProp name="101507520">token_type</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Access Token details</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AUTH_API_Negative_Flow" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Auth API (Invalid Username)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;Adm&quot;,&#xd;
    &quot;Password&quot;: &quot;Admin123@&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Coed 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Username" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="922028486">&quot;error&quot;: &quot;The username or password is incorrect.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">The username is incorrect.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Auth API (Invalid Password)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;Admin&quot;,&#xd;
    &quot;Password&quot;: &quot;Admin&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Coed 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="922028486">&quot;error&quot;: &quot;The username or password is incorrect.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">The password is incorrect.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Auth API (Invalid Grant Type)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;grant_type&quot;: &quot;pass&quot;,&#xd;
    &quot;username&quot;: &quot;Admin&quot;,&#xd;
    &quot;Password&quot;: &quot;Admin&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Coed 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Grant Type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1956798267">&quot;error&quot;: &quot;unsupported_grant_type.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">The Grant Type is incorrect.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="eCIB Happy Flow" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AUTH API" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;grant_type&quot;: &quot;password&quot;,&#xd;
    &quot;username&quot;: &quot;${Username}&quot;,&#xd;
    &quot;Password&quot;: &quot;${Password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Auth Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Auth_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Coed 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Token Details" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1938933922">access_token</stringProp>
                <stringProp name="101507520">token_type</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Access Token details</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (Positive Scenario)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;${LOSRequestRefNo}&quot;,&#xd;
&quot;Product&quot;: &quot;${Product}&quot;,&#xd;
&quot;NewCnic&quot;: &quot;${NewCnic}&quot;,&#xd;
&quot;OldCnic&quot;: &quot;${OldCnic}&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;${PassPortNo}&quot;,&#xd;
&quot;DOB&quot;: &quot;${DOB}&quot;,&#xd;
&quot;NTN&quot;: &quot;${NTN}&quot;,&#xd;
&quot;Name&quot;:&quot;${Name}&quot;,&#xd;
&quot;Street&quot;: &quot;${Street}&quot;,&#xd;
&quot;HouseNo&quot;:&quot;${HouseNo}&quot;,&#xd;
&quot;City&quot;: &quot;${City}&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;${Mohalla_Village}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${eCIB}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB consumer request created successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Mandatory Field Missing" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="1539757839">&quot;Response&quot;: &quot;A value is required. | LOS request ref number\r\nis required |\r\nProduct name is required | The NewCNIC field is required. | PassPort number is required| Name is required | Street is requi\r\nred |\r\nHouse No is required | City is required | Mohalla\r\nvillage is required&quot;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">A value is required</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Duplicate Request" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1608217603">&quot;Status&quot;: false,</stringProp>
                <stringProp name="1362681924">&quot;Response&quot;: &quot;LOS request ref number already exists.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">LOS request ref number already exists</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Product" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1608217603">&quot;Status&quot;: false,</stringProp>
                <stringProp name="1936621106">&quot;Response&quot;: &quot;Product name invalid&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Product name invalid</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="New CNIC Invalid Format" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="529629999">&quot;Response&quot;: &quot;New CNIC must follow the XXXXX-XXXXXXX-X format!&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">New CNIC must follow the XXXXX-XXXXXXX-X format !</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Old CNIC Invalid Format" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="1775601004">&quot;Response&quot;: &quot;Old CNIC must follow the XXX-XX-XXXXXX format!&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Old CNIC must follow the XXX-XX-XXXXXX format !</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="InValid DOB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="1649591202">&quot;Response&quot;: &quot;The value **** is not valid for DOB.|The DOB property is required.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">The value **** is not valid for DOB. The DOB property is required.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="InValid City" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="-357113016">&quot;Response&quot;: &quot;City name invalid&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">City name is invalid</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="eCIB Negative Flow" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticator API" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;grant_type&quot;: &quot;password&quot;,&#xd;
    &quot;username&quot;: &quot;Admin&quot;,&#xd;
    &quot;Password&quot;: &quot;Admin123@&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Auth Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Auth_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Coed 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Token Details" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1938933922">access_token</stringProp>
                <stringProp name="101507520">token_type</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Access Token details</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (Mandatory Field Missing)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;&quot;,&#xd;
&quot;Product&quot;: &quot;House Finance&quot;,&#xd;
&quot;NewCnic&quot;: &quot;12345-1234567-1&quot;,&#xd;
&quot;OldCnic&quot;: &quot;123-12-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02-Dec-2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;Islamabad&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">A Mandatory Value is required</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Mandatory Field Missing" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="1539757839">&quot;Response&quot;: &quot;A value is required. | LOS request ref number\r\nis required |\r\nProduct name is required | The NewCNIC field is required. | PassPort number is required| Name is required | Street is requi\r\nred |\r\nHouse No is required | City is required | Mohalla\r\nvillage is required&quot;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">A value is required</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (Duplicate Request)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;LOS123456&quot;,&#xd;
&quot;Product&quot;: &quot;House Finance&quot;,&#xd;
&quot;NewCnic&quot;: &quot;12345-1234567-1&quot;,&#xd;
&quot;OldCnic&quot;: &quot;123-12-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02-Dec-2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;Islamabad&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">LOS request ref number already exists</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Duplicate Request" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1608217603">&quot;Status&quot;: false,</stringProp>
                <stringProp name="1362681924">&quot;Response&quot;: &quot;LOS request ref number already exists.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">LOS request ref number already exists</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (Invalid Product)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;LOS1234&quot;,&#xd;
&quot;Product&quot;: &quot;abc&quot;,&#xd;
&quot;NewCnic&quot;: &quot;12345-1234567-1&quot;,&#xd;
&quot;OldCnic&quot;: &quot;123-12-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02-Dec-2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;Islamabad&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">Product name invalid</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Product" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1608217603">&quot;Status&quot;: false,</stringProp>
                <stringProp name="1936621106">&quot;Response&quot;: &quot;Product name invalid&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Product name invalid</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (New CNIC Invalid Format)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;LOS1234&quot;,&#xd;
&quot;Product&quot;: &quot;House Finance&quot;,&#xd;
&quot;NewCnic&quot;: &quot;1234512345671&quot;,&#xd;
&quot;OldCnic&quot;: &quot;123-12-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02-Dec-2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;Islamabad&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">New CNIC must follow the XXXXX-XXXXXXX-X format !</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="New CNIC Invalid Format" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="529629999">&quot;Response&quot;: &quot;New CNIC must follow the XXXXX-XXXXXXX-X format!&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">New CNIC must follow the XXXXX-XXXXXXX-X format !</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (Old CNIC Invalid Format)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;LOS1234&quot;,&#xd;
&quot;Product&quot;: &quot;House Finance&quot;,&#xd;
&quot;NewCnic&quot;: &quot;12345-1234567-1&quot;,&#xd;
&quot;OldCnic&quot;: &quot;12312-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02-Dec-2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;Islamabad&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">Old CNIC must follow the XXX-XX-XXXXXX format !</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Old CNIC Invalid Format" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="1775601004">&quot;Response&quot;: &quot;Old CNIC must follow the XXX-XX-XXXXXX format!&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Old CNIC must follow the XXX-XX-XXXXXX format !</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (InValid DOB)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;LOS1234&quot;,&#xd;
&quot;Product&quot;: &quot;House Finance&quot;,&#xd;
&quot;NewCnic&quot;: &quot;12345-1234567-1&quot;,&#xd;
&quot;OldCnic&quot;: &quot;123-12-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02Dec2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;Islamabad&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">The value **** is not valid for DOB. The DOB property is required.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="InValid DOB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="1649591202">&quot;Response&quot;: &quot;The value **** is not valid for DOB.|The DOB property is required.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">The value **** is not valid for DOB. The DOB property is required.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eCIB (InValid City)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;LOSRequestRefNo&quot;: &quot;LOS1234&quot;,&#xd;
&quot;Product&quot;: &quot;House Finance&quot;,&#xd;
&quot;NewCnic&quot;: &quot;12345-1234567-1&quot;,&#xd;
&quot;OldCnic&quot;: &quot;123-12-123456&quot;,&#xd;
&quot;PassPortNo&quot;: &quot;ED9918513&quot;,&#xd;
&quot;DOB&quot;: &quot;02-Dec-2002&quot;,&#xd;
&quot;NTN&quot;: &quot;9187414&quot;,&#xd;
&quot;Name&quot;:&quot;Muhammad Usman&quot;,&#xd;
&quot;Street&quot;: &quot;Street # 4 F9 Block &quot;,&#xd;
&quot;HouseNo&quot;:&quot;House # F 9025&quot;,&#xd;
&quot;City&quot;: &quot;&quot;,&#xd;
&quot;Mohalla_Village&quot;:&quot;Green Area&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/eCIB_Consumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="TestPlan.comments">City name is invalid</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">access_token</stringProp>
                  <stringProp name="Header.value">${Auth_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Failed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Status Code 200 Failed</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Request UnSuccessful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-454076086">&quot;Status&quot;: true,</stringProp>
                <stringProp name="-1751337278">&quot;Response&quot;: &quot;eCIB consumer request created successfully.&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">eCIB Consumer Request Not Created Successfully.</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="InValid City" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-467519985">&quot;Status&quot;: false</stringProp>
                <stringProp name="-357113016">&quot;Response&quot;: &quot;City name invalid&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">City name is invalid</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename">D:/Automation/MBL-RPA/Jmeter/RPA API Respose Body</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// Get the previous HTTP response
def prevResponse = prev.getResponseDataAsString();

// Print the response body to the JMeter log
log.info(&quot;Response Body:\n${prevResponse}&quot;);
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Car Ijara" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Content" elementType="Argument">
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.name">Content</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Car Ijara Default Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">ci.systemsltd.local</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Direct Sales Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">50</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Direct Sales Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;password&quot;: &quot;abc&quot;,&#xd;
		&quot;userId&quot;: &quot;abdul.nafay&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/userProfile/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Token Extractor 1" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">LoginToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create New Application" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${LoginToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">1680</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">JSESSIONID=tg5BHeZRmOevgLL7yI4bkvWaqpnMKYoExB9bEZKc.LOSAPP01</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Application Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;accountId&quot;: null,&#xd;
		&quot;anyOtherAssetOwnedCodeId&quot;: 178002,&#xd;
		&quot;applicantDbr&quot;: null,&#xd;
		&quot;applicantHavingDrivingLicenseCodeId&quot;: null,&#xd;
		&quot;applicationTypeCodeId&quot;: 100005,&#xd;
		&quot;areaId&quot;: 28, &#xd;
		&quot;branchId&quot;: 667, &#xd;
		&quot;branchUserName&quot;: null,&#xd;
		&quot;ciuAnalystName&quot;: null,&#xd;
		&quot;cnic&quot;: &quot;4220111111110&quot;, &#xd;
		&quot;cnicIssuanceDate&quot;: &quot;2018-01-01T00:00:00.000Z&quot;,&#xd;
		&quot;countryAddress&quot;: null,&#xd;
		&quot;customerId&quot;: null,&#xd;
		&quot;customerTaxStatusCodeId&quot;: 156001,&#xd;
		&quot;dateOfBirth&quot;: &quot;1990-01-05T00:00:00.000Z&quot;, &#xd;
		&quot;drivingLicenseNo&quot;: 0,&#xd;
		&quot;educationalQualificationCodeId&quot;: 102006,&#xd;
		&quot;email&quot;: null,&#xd;
		&quot;employBusinessname&quot;: null,&#xd;
		&quot;employBusinessphone&quot;: null,&#xd;
		&quot;existingMblClientCodeId&quot;: 130002,&#xd;
		&quot;expiryDate&quot;: &quot;2024-03-31T00:00:00.000Z&quot;, &#xd;
		&quot;familySize&quot;: 0,&#xd;
		&quot;fatherHusbandName&quot;: &quot;MTZ&quot;,&#xd;
		&quot;firstName&quot;: &quot;Sohaib&quot;,&#xd;
		&quot;genderCodeId&quot;: 127001,&#xd;
		&quot;iban&quot;: null,&#xd;
		&quot;idType&quot;: &quot;ID-N&quot;,&#xd;
		&quot;industry&quot;: null,&#xd;
		&quot;industryDesc&quot;: null,&#xd;
		&quot;instanceId&quot;: null,&#xd;
		&quot;institute&quot;: &quot;&quot;,&#xd;
		&quot;integrationContractStatusCodeId&quot;: null,&#xd;
		&quot;isAnyDeviationMark&quot;: false,&#xd;
		&quot;isException&quot;: false,&#xd;
		&quot;isIncomeEstimationReceived&quot;: false,&#xd;
		&quot;isSdRevised&quot;: false,&#xd;
		&quot;lastName&quot;: &quot;Abbasi&quot;,&#xd;
		&quot;leadId&quot;: null,&#xd;
		&quot;leadSubmissionDate&quot;: null,&#xd;
		&quot;limitId&quot;: null,&#xd;
		&quot;maritalStatusCodeId&quot;: 103001,&#xd;
		&quot;mblAccountHolder&quot;: false,&#xd;
		&quot;middleName&quot;: &quot;&quot;,&#xd;
		&quot;motherName&quot;: &quot;MTA&quot;,&#xd;
		&quot;nfaAmount&quot;: null,&#xd;
		&quot;noOfChildren&quot;: 0,&#xd;
		&quot;noOfSchoolGoingChildren&quot;: 0,&#xd;
		&quot;occupation&quot;: null,&#xd;
		&quot;ntn&quot;: &quot;4220100000000&quot;, &#xd;
		&quot;oldCnic&quot;: &quot;&quot;,&#xd;
		&quot;otherDependents&quot;: 2,&#xd;
		&quot;pmRentalAmount&quot;: null,&#xd;
		&quot;preApprovedCase&quot;: false,&#xd;
		&quot;premiumCustomer&quot;: false,&#xd;
		&quot;processingFeeReceived&quot;: false,&#xd;
		&quot;processingFeeWaived&quot;: false,&#xd;
		&quot;productCodeId&quot;: 101001,&#xd;
		&quot;sdAccount&quot;: null,&#xd;
		&quot;sector&quot;: null,&#xd;
		&quot;sectorDesc&quot;: null,&#xd;
		&quot;securityDepositPercentage&quot;: null,&#xd;
		&quot;streetAddress&quot;: null,&#xd;
		&quot;tabCode&quot;: &quot;BASIC_INFO_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;tenureYearsCodeId&quot;: null,&#xd;
		&quot;totalNoOfDependents&quot;: 3,&#xd;
		&quot;townCountryAddress&quot;: null,&#xd;
		&quot;userId&quot;: &quot;abdul.nafay&quot;,&#xd;
		&quot;userProfileId&quot;: 238, &#xd;
		&quot;vehicleId&quot;: null&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/ciApplication/saveApplicationDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ciApplicationId Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ciApplicationId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..ciApplicationId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ciTaskId Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.taskId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Calculator Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;bookingPeriodDays&quot;: 0,&#xd;
		&quot;bookingPeriodInMonths&quot;: 0,&#xd;
		&quot;bookingPeriodInMonthsCodeId&quot;: null,&#xd;
		&quot;calculatorTypeCodeId&quot;: 133001,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;costOfVehicle&quot;: 3667000,&#xd;
		&quot;deliveryTypeCodeId&quot;: 116002,&#xd;
		&quot;fetchCalculatorData&quot;: false,&#xd;
		&quot;graceBookingPeriodDays&quot;: 0,&#xd;
		&quot;graceBookingPeriodInMonths&quot;: 0,&#xd;
		&quot;manufacturerMaintenanceId&quot;: 3,&#xd;
		&quot;modelYear&quot;: &quot;2023-01-01T00:00:00.000Z&quot;,&#xd;
		&quot;netProfitRate&quot;: 13,&#xd;
		&quot;pmRentAmount&quot;: 74759,&#xd;
		&quot;rvPercentage&quot;: 0,&#xd;
		&quot;sdAmount&quot;: 733400,&#xd;
		&quot;securityDepositPercentage&quot;: 20,&#xd;
		&quot;tabCode&quot;: &quot;CALCULATOR_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;tenureMonths&quot;: 60,&#xd;
		&quot;tenureYearsCodeId&quot;: 115005,&#xd;
		&quot;tenureYearsCodeValue&quot;: &quot;5&quot;,&#xd;
		&quot;vehicleMaintenanceId&quot;: 4,&#xd;
		&quot;vehicleTypeCodeId&quot;: 110001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/calculator/saveCalculatorDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Residence Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: [&#xd;
		{&#xd;
			&quot;accommodationTypeCodeId&quot;: 106001,&#xd;
			&quot;address&quot;: &quot;L-3134, KDA, 2, Gulshan Iqbal &quot;,&#xd;
			&quot;apartmentSociety&quot;: &quot;KDA&quot;,&#xd;
			&quot;areaName&quot;: &quot;Gulshan Iqbal&quot;,&#xd;
			&quot;areaSizeOfAccommodation&quot;: 120,&#xd;
			&quot;blockNo&quot;: &quot;2&quot;,&#xd;
			&quot;cellNoPrimary&quot;: &quot;03431052040&quot;,&#xd;
			&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
			&quot;cityId&quot;: 85,&#xd;
			&quot;correspondenceViaCodeId&quot;: 162002,&#xd;
			&quot;distanceDiffKm&quot;: 2,&#xd;
			&quot;gaugeOfElevationCodeId&quot;: 107001,&#xd;
			&quot;houseNo&quot;: &quot;L-3134&quot;,&#xd;
			&quot;provinceId&quot;: 7,&#xd;
			&quot;rentPerMonth&quot;: null,&#xd;
			&quot;residenceAtCurrentAddressSince&quot;: &quot;1992-01-01T00:00:00.000Z&quot;,&#xd;
			&quot;residenceInThisCitySince&quot;: &quot;1990-08-15T00:00:00.000Z&quot;,&#xd;
			&quot;residenceTypeCodeId&quot;: 104001,&#xd;
			&quot;residentialPhoneNo&quot;: &quot;021348652067&quot;,&#xd;
			&quot;residentialStatusCodeId&quot;: 105001,&#xd;
			&quot;tabCode&quot;: &quot;RESIDENCE_EDITABLE&quot;,&#xd;
			&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
			&quot;utilityBillHistoryCodeId&quot;: 148001&#xd;
		},&#xd;
		{&#xd;
			&quot;address&quot;: &quot;L-3134, KDA, 2, Gulshan Iqbal &quot;,&#xd;
			&quot;apartmentSociety&quot;: &quot;KDA&quot;,&#xd;
			&quot;areaName&quot;: &quot;Gulshan Iqbal&quot;,&#xd;
			&quot;areaSizeOfAccommodation&quot;: 120,&#xd;
			&quot;blockNo&quot;: &quot;2&quot;,&#xd;
			&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
			&quot;cityId&quot;: 85,&#xd;
			&quot;gaugeOfElevationCodeId&quot;: 107001,&#xd;
			&quot;houseNo&quot;: &quot;L-3134&quot;,&#xd;
			&quot;provinceId&quot;: 7,&#xd;
			&quot;residenceTypeCodeId&quot;: 104002&#xd;
		},&#xd;
		{&#xd;
			&quot;accommodationTypeCodeId&quot;: null,&#xd;
			&quot;accommodationTypeCodeValue&quot;: null,&#xd;
			&quot;address&quot;: null,&#xd;
			&quot;apartmentSociety&quot;: null,&#xd;
			&quot;applicantEmail&quot;: null,&#xd;
			&quot;areaName&quot;: null,&#xd;
			&quot;areaSizeOfAccommodation&quot;: null,&#xd;
			&quot;blockNo&quot;: null,&#xd;
			&quot;cellNoPrimary&quot;: null,&#xd;
			&quot;cellNoSecondary&quot;: null,&#xd;
			&quot;ciApplicationId&quot;: 72230,&#xd;
			&quot;cityId&quot;: null,&#xd;
			&quot;cityValue&quot;: null,&#xd;
			&quot;correspondenceCodeId&quot;: null,&#xd;
			&quot;correspondenceCodeValue&quot;: null,&#xd;
			&quot;correspondenceViaCodeId&quot;: null,&#xd;
			&quot;correspondenceViaCodeValue&quot;: null,&#xd;
			&quot;countryAddress&quot;: null,&#xd;
			&quot;distanceDiffKm&quot;: null,&#xd;
			&quot;districtTehsilName&quot;: null,&#xd;
			&quot;faxNo&quot;: null,&#xd;
			&quot;gaugeOfElevationCodeId&quot;: null,&#xd;
			&quot;gaugeOfElevationCodeValue&quot;: null,&#xd;
			&quot;houseNo&quot;: null,&#xd;
			&quot;isRemoved&quot;: null,&#xd;
			&quot;nearestLocation&quot;: null,&#xd;
			&quot;phoneNoPrimary&quot;: null,&#xd;
			&quot;provinceId&quot;: null,&#xd;
			&quot;provinceValue&quot;: null,&#xd;
			&quot;rentPerMonth&quot;: null,&#xd;
			&quot;residenceAtCurrentAddressSince&quot;: null,&#xd;
			&quot;residenceId&quot;: 74291,&#xd;
			&quot;residenceInThisCitySince&quot;: null,&#xd;
			&quot;residenceTypeCodeId&quot;: 104003,&#xd;
			&quot;residenceTypeCodeValue&quot;: &quot;Core Banking Residence&quot;,&#xd;
			&quot;residentialPhoneNo&quot;: null,&#xd;
			&quot;residentialStatusCodeId&quot;: null,&#xd;
			&quot;residentialStatusCodeValue&quot;: null,&#xd;
			&quot;streetAddress&quot;: null,&#xd;
			&quot;townCountryAddress&quot;: null,&#xd;
			&quot;utilityBillHistoryCodeId&quot;: null,&#xd;
			&quot;utilityBillHistoryCodeValue&quot;: null,&#xd;
			&quot;validationErrorDtoList&quot;: null&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/residence/updateResidenceDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Employment Detail Applicant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;address&quot;: &quot;401, Sumya Business Avenue, Gulshan Iqbal &quot;,&#xd;
		&quot;apartmentSociety&quot;: &quot;Sumya Business Avenue&quot;,&#xd;
		&quot;areaName&quot;: &quot;Gulshan Iqbal&quot;,&#xd;
		&quot;bankNameCodeId&quot;: 144020,&#xd;
		&quot;cellNoPrimary&quot;: &quot;03432509060&quot;,&#xd;
		&quot;cellNoSecondary&quot;: null,&#xd;
		&quot;ciApplicationId&quot;: &quot;${ciApplicationId}&quot;,&#xd;
		&quot;cityId&quot;: 85,&#xd;
		&quot;commissionIncentive&quot;: null,&#xd;
		&quot;deductions&quot;: null,&#xd;
		&quot;designation&quot;: &quot;Sr. Quality Assurance Engineer&quot;,&#xd;
		&quot;employedSince&quot;: &quot;2018-08-15T00:00:00.000Z&quot;,&#xd;
		&quot;employeeSchemeApplicableCodeId&quot;: null,&#xd;
		&quot;employerHrEmail&quot;: null,&#xd;
		&quot;employerName&quot;: &quot;Systems limited&quot;,&#xd;
		&quot;employmentCategoryCodeId&quot;: 119001,&#xd;
		&quot;employmentDetailId&quot;: null,&#xd;
		&quot;employmentStatusCodeId&quot;: 120001,&#xd;
		&quot;employmentTypeCodeId&quot;: 118001,&#xd;
		&quot;faxNo&quot;: null,&#xd;
		&quot;gradeRank&quot;: &quot;4&quot;,&#xd;
		&quot;grossSalary&quot;: 350000,&#xd;
		&quot;houseNo&quot;: &quot;401&quot;,&#xd;
		&quot;incomeAsPerLaf&quot;: null,&#xd;
		&quot;legalEntityCodeId&quot;: 121003,&#xd;
		&quot;natureOfBusinessCodeId&quot;: 122002,&#xd;
		&quot;netIncome&quot;: 350000,&#xd;
		&quot;other&quot;: null,&#xd;
		&quot;phoneNoPrimary&quot;: null,&#xd;
		&quot;provinceId&quot;: 7,&#xd;
		&quot;salaryCreditedAccountNumber&quot;: &quot;00420&quot;,&#xd;
		&quot;salaryCreditedBankName&quot;: &quot;Meezan Bank Limited.&quot;,&#xd;
		&quot;salaryCreditedinBankStatementCodeId&quot;: 130001,&#xd;
		&quot;salaryReceivedThroughCodeId&quot;: 163001,&#xd;
		&quot;tabCode&quot;: &quot;EMPLOYMENT_DETAILS_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;totalCareerYears&quot;: &quot;2013-01-01T00:00:00.000Z&quot;,&#xd;
		&quot;totalIncome&quot;: 350000&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/employmentDetail/saveEmploymentDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Employment Details Co-Applicant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;accountNumber&quot;: &quot;001420&quot;,&#xd;
		&quot;address&quot;: &quot;L-3134, KDA, Gulshan Iqbal &quot;,&#xd;
		&quot;apartmentSociety&quot;: &quot;KDA&quot;,&#xd;
		&quot;areaName&quot;: &quot;Gulshan Iqbal&quot;,&#xd;
		&quot;areaSizeOfAccomodation&quot;: 120,&#xd;
		&quot;bankName&quot;: &quot;Habib Bank Limited.&quot;,&#xd;
		&quot;bankNameCodeId&quot;: 144013,&#xd;
		&quot;ciApplicationId&quot;: &quot;${ciApplicationId}&quot;,&#xd;
		&quot;cityId&quot;: 85,&#xd;
		&quot;cnic&quot;: &quot;4220199999999&quot;,&#xd;
		&quot;coAppAddress&quot;: &quot;L-3134, KDA, Gulshan Iqbal &quot;,&#xd;
		&quot;coAppApartmentSociety&quot;: &quot;KDA&quot;,&#xd;
		&quot;coAppArea&quot;: &quot;Gulshan Iqbal&quot;,&#xd;
		&quot;coAppCellPrimary&quot;: &quot;03329664857&quot;,&#xd;
		&quot;coAppCityId&quot;: 85,&#xd;
		&quot;coAppHouseNo&quot;: &quot;L-3134&quot;,&#xd;
		&quot;coApplicantShare&quot;: 1,&#xd;
		&quot;coAppProvinceId&quot;: 7,&#xd;
		&quot;coAppRelationshipWithApplicantCodeId&quot;: 154004,&#xd;
		&quot;coAppResidentialPhone&quot;: &quot;02134648507&quot;,&#xd;
		&quot;commissionIncentive&quot;: null,&#xd;
		&quot;dateOfBirth&quot;: &quot;1975-12-12T00:00:00.000Z&quot;,&#xd;
		&quot;deductions&quot;: null,&#xd;
		&quot;districtTehsilName&quot;: null,&#xd;
		&quot;employmentCategoryCodeId&quot;: 119004,&#xd;
		&quot;employmentDetailId&quot;: null,&#xd;
		&quot;employmentTypeCodeId&quot;: 118003,&#xd;
		&quot;fatherHusbandName&quot;: &quot;MTZA&quot;,&#xd;
		&quot;firstName&quot;: &quot;MT&quot;,&#xd;
		&quot;genderCodeId&quot;: 127002,&#xd;
		&quot;guageOfElevationCodeId&quot;: 107001,&#xd;
		&quot;houseNo&quot;: &quot;L-3134&quot;,&#xd;
		&quot;incomeAsPerLaf&quot;: null,&#xd;
		&quot;lastName&quot;: &quot;Abbasi&quot;,&#xd;
		&quot;motherName&quot;: &quot;Khursheeda&quot;,&#xd;
		&quot;otherQualification&quot;: null,&#xd;
		&quot;propertyRentedSince&quot;: &quot;2018-12-01T00:00:00.000Z&quot;,&#xd;
		&quot;provinceId&quot;: 7,&#xd;
		&quot;qualificationCodeId&quot;: 102006,&#xd;
		&quot;rentalIncome&quot;: &quot;100000&quot;,&#xd;
		&quot;tabCode&quot;: &quot;EMPLOYMENT_DETAILS_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/employmentDetail/saveEmploymentDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Application Decision" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;applicationDecisionCodeId&quot;: 172001,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;commentDtos&quot;: [&#xd;
			{&#xd;
				&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
				&quot;commentPhase&quot;: &quot;APPLICATION_DECISION&quot;,&#xd;
				&quot;comments&quot;: &quot;Ok&quot;,&#xd;
				&quot;commentsDate&quot;: &quot;2023-08-22T07:21:54.207Z&quot;,&#xd;
				&quot;username&quot;: &quot;abdul.nafay&quot;&#xd;
			}&#xd;
		],&#xd;
		&quot;decisionBy&quot;: &quot;abdul.nafay&quot;,&#xd;
		&quot;decisionDate&quot;: &quot;2023-08-22T07:21:54.206Z&quot;,&#xd;
		&quot;decisionReasonDtoList&quot;: [],&#xd;
		&quot;isLienRequired&quot;: false,&#xd;
		&quot;isOverrideLienRequired&quot;: false,&#xd;
		&quot;isOverridePGRequired&quot;: false,&#xd;
		&quot;isPGRequired&quot;: false,&#xd;
		&quot;tabCode&quot;: &quot;DECISION_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;teamCode&quot;: &quot;DIRECT_SALES&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/applicationDecision/saveApplicationDecision</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Deposit Slip" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;amount&quot;: 999,&#xd;
		&quot;chequeDate&quot;: null,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;fedPercentage&quot;: &quot;13.00&quot;,&#xd;
		&quot;glAccount&quot;: &quot;PL542020&quot;,&#xd;
		&quot;glTitle&quot;: &quot;Processing Fee GL&quot;,&#xd;
		&quot;nonChequingAccountNo&quot;: null,&#xd;
		&quot;paymentThrough&quot;: &quot;Cash&quot;,&#xd;
		&quot;paymentTypeCodeId&quot;: 125002,&#xd;
		&quot;paymentTypeCodeValue&quot;: &quot;Processing Fee&quot;,&#xd;
		&quot;tabCode&quot;: &quot;DEPOSIT_SLIP_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;totalAmount&quot;: &quot;1128.87&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/depositSlips/saveDepositSlip</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Monthly Income Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;coApplicantCurrentOtherIncome&quot;: null,&#xd;
		&quot;coApplicantIncome&quot;: 0,&#xd;
		&quot;dependentExpense&quot;: 0,&#xd;
		&quot;disposableIncome&quot;: -74759,&#xd;
		&quot;incomeAssessedFromCodeId&quot;: 160001,&#xd;
		&quot;isMblStatement&quot;: true,&#xd;
		&quot;isNonMblStatement&quot;: true,&#xd;
		&quot;netIncome&quot;: 0,&#xd;
		&quot;netMonthlySaving&quot;: 0,&#xd;
		&quot;otherIncome&quot;: null,&#xd;
		&quot;otherLoanPayment&quot;: 0,&#xd;
		&quot;tabCode&quot;: &quot;MONTHLY_INCOME_DETAILS_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;totalExpense&quot;: 0,&#xd;
		&quot;totalNetIncome&quot;: 0&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/monthlyIncomeDetail/saveMonthlyIncomeDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Reference 1 Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;cellNumber&quot;: &quot;03215212524&quot;,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;cnic&quot;: &quot;4220111111111&quot;,&#xd;
		&quot;comments&quot;: &quot;Good&quot;,&#xd;
		&quot;name&quot;: &quot;Aafraz&quot;,&#xd;
		&quot;officeAddress&quot;: &quot;Systems Limited&quot;,&#xd;
		&quot;officePhoneNo&quot;: null,&#xd;
		&quot;referenceRemarksCodeId&quot;: null,&#xd;
		&quot;relationship&quot;: &quot;Friend&quot;,&#xd;
		&quot;residentialAddress&quot;: &quot;Gulshan&quot;,&#xd;
		&quot;residentialPhoneNo&quot;: null,&#xd;
		&quot;tabCode&quot;: &quot;REFERENCES_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/referenceDetails/saveReferenceDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Reference 2 Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;cellNumber&quot;: &quot;03120000000&quot;,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;cnic&quot;: &quot;4220133333333&quot;,&#xd;
		&quot;comments&quot;: &quot;Good &quot;,&#xd;
		&quot;name&quot;: &quot;Maliha&quot;,&#xd;
		&quot;officeAddress&quot;: &quot;Karachi&quot;,&#xd;
		&quot;officePhoneNo&quot;: null,&#xd;
		&quot;referenceRemarksCodeId&quot;: null,&#xd;
		&quot;relationship&quot;: &quot;Friend&quot;,&#xd;
		&quot;residentialAddress&quot;: &quot;Gulshan&quot;,&#xd;
		&quot;residentialPhoneNo&quot;: null,&#xd;
		&quot;tabCode&quot;: &quot;REFERENCES_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/referenceDetails/saveReferenceDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Internal Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;bmEmpId&quot;: null,&#xd;
		&quot;bmName&quot;: null,&#xd;
		&quot;branchCoordinatorEmpId&quot;: null,&#xd;
		&quot;branchCoordinatorName&quot;: null,&#xd;
		&quot;branchStaffEmpId&quot;: null,&#xd;
		&quot;branchStaffName&quot;: null,&#xd;
		&quot;channelCodeId&quot;: 124001,&#xd;
		&quot;ciApplicantIncomeVerified&quot;: true,&#xd;
		&quot;ciApplicationId&quot;: &quot;${ciApplicationId}&quot;,&#xd;
		&quot;comments&quot;: &quot;Ok. Good&quot;,&#xd;
		&quot;companyMaintenanceId&quot;: 38,&#xd;
		&quot;dealerName&quot;: &quot;Honda Shahrah E Faisal&quot;,&#xd;
		&quot;designationCodeId&quot;: null,&#xd;
		&quot;designationCodeValue&quot;: null,&#xd;
		&quot;hubCode&quot;: &quot;PK0010002&quot;,&#xd;
		&quot;internalDetailId&quot;: 72202,&#xd;
		&quot;leadReferredByCodeId&quot;: 150005,&#xd;
		&quot;referralBranchCode&quot;: null,&#xd;
		&quot;referralBranchName&quot;: null,&#xd;
		&quot;rmEmpId&quot;: &quot;abdul&quot;,&#xd;
		&quot;rmName&quot;: &quot;abdul nafay&quot;,&#xd;
		&quot;roEmpId&quot;: &quot;abdul&quot;,&#xd;
		&quot;roName&quot;: &quot;abdul.nafay - 238&quot;,&#xd;
		&quot;roUserProfileId&quot;: 238,&#xd;
		&quot;tabCode&quot;: &quot;OTHER_INTERNAL_DETAILS_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;userId&quot;: null,&#xd;
		&quot;userProfileId&quot;: null&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/internalDetail/updateInternalDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Waiver Criteria" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;isExemptOfficeVisitReport&quot;: false,&#xd;
		&quot;isExemptResidenceVisitExport&quot;: false,&#xd;
		&quot;isIncomeEstimationRequired&quot;: false,&#xd;
		&quot;isNonSalariedCustomer&quot;: false,&#xd;
		&quot;isOneYearMblRelationship&quot;: false,&#xd;
		&quot;isOneYearPremium&quot;: false,&#xd;
		&quot;isSalariedCustomer&quot;: true,&#xd;
		&quot;isSdGridWaiver&quot;: false,&#xd;
		&quot;premiumCustomer&quot;: false,&#xd;
		&quot;promoCode&quot;: null,&#xd;
		&quot;tabCode&quot;: &quot;WAVIER_CRITERIA_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/waiverCriteria/saveWaiverCriteria</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Application Form" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;Gold Buying &amp; Selling Fatwa.pdf&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143093,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Bank Statement Applicant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;PSTB Fee Voucher New 3257.pdf&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143050,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Bank Statement Co-Applicant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;PSTB Fee Voucher New 3257.pdf&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143159,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document CNIC Applicant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;WhatsApp Image 2023-06-25 at 16.03.12.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143001,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document CNIC Co-Applicant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143158,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Co-Applicant UnderTaking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143011,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Filer Proof" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143098,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Photograph" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;865948ad-d9f3-4169-808d-cab9f2f26583.jpeg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143002,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Property Ownership Proof (Co-Applicant)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;Systems Limited Policies.pdf&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143117,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Rent Agreement (Co-Applicant)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143106,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Salary Slip" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143068,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Tenure Proof - Current (Applicant)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143048,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Document Tenure Proof - Current (Co-Applicant)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;attachmentName&quot;: &quot;20170915_172715.jpg&quot;,&#xd;
		&quot;attachmentTypeCodeId&quot;: 143109,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;content&quot;: &quot;${Content}&quot;,&#xd;
		&quot;objectName&quot;: &quot;BasicInformation&quot;,&#xd;
		&quot;tabCode&quot;: &quot;ATTACHMENT_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;typeCodeId&quot;: 158001&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/attachment/uploadDocument</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Application Form" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;isBranchUser&quot;: false,&#xd;
		&quot;isDeferral&quot;: false,&#xd;
		&quot;tabCode&quot;: &quot;BASIC_INFO_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;NEW_APPLICATION&quot;,&#xd;
		&quot;taskId&quot;: ${taskId}&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/ciApplication/submitApplicationForm</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Application Number Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">applicationNumber</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.applicationNumber</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Search Application1" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">30000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${LoginToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">1680</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">JSESSIONID=tg5BHeZRmOevgLL7yI4bkvWaqpnMKYoExB9bEZKc.LOSAPP01</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchApplications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;applicationNumber&quot;: &quot;${applicationNumber}&quot;,&#xd;
		&quot;applicationNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;applicationStatusCodeId&quot;: null,&#xd;
		&quot;applicationSubmissionEndDate&quot;: null,&#xd;
		&quot;assignedToUser&quot;: null,&#xd;
		&quot;assignedToUserSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;cadBankStatementTaskStatusCodeId&quot;: null,&#xd;
		&quot;chassisNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;cnicSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;creditCheckTaskStatusCodeId&quot;: null,&#xd;
		&quot;engineNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;externalVerificationTaskStatusCodeId&quot;: null,&#xd;
		&quot;firstNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;isClaimedTask&quot;: false,&#xd;
		&quot;isPagination&quot;: true,&#xd;
		&quot;lastNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;leadSubmissionEndDate&quot;: null,&#xd;
		&quot;paginate&quot;: {&#xd;
			&quot;endRow&quot;: 14,&#xd;
			&quot;filterModel&quot;: {},&#xd;
			&quot;sortModel&quot;: [],&#xd;
			&quot;startRow&quot;: 0&#xd;
		},&#xd;
		&quot;registrationNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;salesStaffNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;tabCode&quot;: &quot;NAV_IN_PROGRESS&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/ciApplication/searchApplications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="assignedToUser Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">assignedToUser</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..assignedToUser</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Assigned To User Login1" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <stringProp name="TestPlan.comments">Review New Application</stringProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">47</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assigned User Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;password&quot;: &quot;abc&quot;,&#xd;
		&quot;userId&quot;: &quot;${assignedToUser}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/userProfile/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Token Extractor 2" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">LoginToken_2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Review New Application" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${LoginToken_2}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">656</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">JSESSIONID=prql6uMzI6Xz14DAeC5wjaHqnpqfVz9PTdgegL3n.LOSAPP01</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Application" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;applicationNumber&quot;: &quot;${applicationNumber}&quot;,&#xd;
		&quot;applicationNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;applicationSubmissionEndDate&quot;: null,&#xd;
		&quot;assignedToUser&quot;: &quot;abluser6&quot;,&#xd;
		&quot;assignedToUserSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;cadBankStatementTaskStatusCodeId&quot;: null,&#xd;
		&quot;chassisNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;cnicSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;creditCheckTaskStatusCodeId&quot;: null,&#xd;
		&quot;engineNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;externalVerificationTaskStatusCodeId&quot;: null,&#xd;
		&quot;firstNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;isClaimedTask&quot;: true,&#xd;
		&quot;lastNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;leadSubmissionEndDate&quot;: null,&#xd;
		&quot;registrationNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;salesStaffNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;tabCode&quot;: &quot;BPM&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/bpm/searchApplications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.refname">teamCode</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;teamCode&quot;:&quot;(*.?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="teamCode Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">teamCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..teamCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="taskId Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..taskId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getApplicationDetails" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;tabCode&quot;: &quot;BASIC_INFO_READONLY&quot;,&#xd;
		&quot;taskCode&quot;: &quot;REVIEW_NEW_APPLICATION&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/ciApplication/getApplicationDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="areaId Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">areaId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..areaId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Application Decision" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;applicationDecisionCodeId&quot;: 172001,&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;commentDtos&quot;: [&#xd;
			{&#xd;
				&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
				&quot;commentPhase&quot;: &quot;APPLICATION_DECISION&quot;,&#xd;
				&quot;comments&quot;: &quot;Good&quot;,&#xd;
				&quot;commentsDate&quot;: &quot;2023-08-22T12:06:24.875Z&quot;,&#xd;
				&quot;username&quot;: &quot;${assignedToUser}&quot;&#xd;
			}&#xd;
		],&#xd;
		&quot;decisionBy&quot;: &quot;${assignedToUser}&quot;,&#xd;
		&quot;decisionDate&quot;: &quot;2023-08-22T12:06:24.875Z&quot;,&#xd;
		&quot;decisionReasonDtoList&quot;: [],&#xd;
		&quot;isLienRequired&quot;: false,&#xd;
		&quot;isOverrideLienRequired&quot;: false,&#xd;
		&quot;isOverridePGRequired&quot;: false,&#xd;
		&quot;isOverrideSDRequired&quot;: false,&#xd;
		&quot;isPGRequired&quot;: false,&#xd;
		&quot;tabCode&quot;: &quot;DECISION_EDITABLE&quot;,&#xd;
		&quot;taskCode&quot;: &quot;REVIEW_NEW_APPLICATION&quot;,&#xd;
		&quot;teamCode&quot;: &quot;${teamCode}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/applicationDecision/saveApplicationDecision</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Finish Decision Task" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;ciApplicationId&quot;: ${ciApplicationId},&#xd;
		&quot;isBranchUser&quot;: false,&#xd;
		&quot;isDeferral&quot;: false,&#xd;
		&quot;tabCode&quot;: &quot;BPM&quot;,&#xd;
		&quot;taskCode&quot;: &quot;REVIEW_NEW_APPLICATION&quot;,&#xd;
		&quot;taskId&quot;: ${taskId}&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/bpm/finishTask</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Search Application2" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">30000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${LoginToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">1680</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">JSESSIONID=tg5BHeZRmOevgLL7yI4bkvWaqpnMKYoExB9bEZKc.LOSAPP01</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchApplications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;applicationNumber&quot;: &quot;${applicationNumber}&quot;,&#xd;
		&quot;applicationNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;applicationStatusCodeId&quot;: null,&#xd;
		&quot;applicationSubmissionEndDate&quot;: null,&#xd;
		&quot;areaId&quot;: ${areaId},&#xd;
		&quot;assignedToUser&quot;: null,&#xd;
		&quot;assignedToUserSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;cadBankStatementTaskStatusCodeId&quot;: null,&#xd;
		&quot;chassisNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;cnicSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;creditCheckTaskStatusCodeId&quot;: null,&#xd;
		&quot;engineNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;externalVerificationTaskStatusCodeId&quot;: null,&#xd;
		&quot;firstNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;isClaimedTask&quot;: false,&#xd;
		&quot;isPagination&quot;: true,&#xd;
		&quot;lastNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;leadSubmissionEndDate&quot;: null,&#xd;
		&quot;paginate&quot;: {&#xd;
			&quot;endRow&quot;: 14,&#xd;
			&quot;filterModel&quot;: {},&#xd;
			&quot;sortModel&quot;: [],&#xd;
			&quot;startRow&quot;: 0&#xd;
		},&#xd;
		&quot;registrationNumberSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;salesStaffNameSearchIndicator&quot;: &quot;Contains&quot;,&#xd;
		&quot;tabCode&quot;: &quot;NAV_IN_PROGRESS&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/ciApplication/searchApplications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignedToUser CREDIT_REPORT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.regex">&quot;taskCode&quot;:&quot;CREDIT_REPORT&quot;,&quot;applicationNumber&quot;:&quot;(.*?)&quot;,&quot;applicationStatusName&quot;:&quot;In Progress&quot;,&quot;assignedToUser&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.refname">assignedToUser1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignedToUser EXTERNAL_VERIFICATION" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.regex">&quot;taskCode&quot;:&quot;EXTERNAL_VERIFICATION&quot;,&quot;applicationNumber&quot;:&quot;(.*?)&quot;,&quot;applicationStatusName&quot;:&quot;In Progress&quot;,&quot;assignedToUser&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.refname">assignedToUser2</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignedToUser BS_&amp;_OTHER_VERIFICATION" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.refname">assignedToUser3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;taskCode&quot;:&quot;BANK_STATEMENT_AND_OTHER_DOCUMENTS_VERIFICATION&quot;,&quot;applicationNumber&quot;:&quot;(.*?)&quot;,&quot;applicationStatusName&quot;:&quot;In Progress&quot;,&quot;assignedToUser&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignedToUser COMPLETE_APPLICATION" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.refname">assignedToUser4</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;taskCode&quot;:&quot;COMPLETE_APPLICATION&quot;,&quot;applicationNumber&quot;:&quot;(.*?)&quot;,&quot;applicationStatusName&quot;:&quot;In Progress&quot;,&quot;assignedToUser&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Assigned To User Login2" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${LoginToken_2}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">656</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://ci.systemsltd.local/</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">JSESSIONID=prql6uMzI6Xz14DAeC5wjaHqnpqfVz9PTdgegL3n.LOSAPP01</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-GPC" elementType="Header">
                <stringProp name="Header.name">Sec-GPC</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assigned User Login(Credit_Report)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;password&quot;: &quot;abc&quot;,&#xd;
		&quot;userId&quot;: &quot;${assignedToUser1}&quot;&#xd;
		}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/userProfile/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assigned User Login(EXTERNAL_VERIFICATION)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;password&quot;: &quot;abc&quot;,&#xd;
		&quot;userId&quot;: &quot;${assignedToUser2}&quot;&#xd;
		}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/userProfile/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assigned User Login(BS_&amp;_OTHER_VERIFICATION)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;password&quot;: &quot;abc&quot;,&#xd;
		&quot;userId&quot;: &quot;${assignedToUser3}&quot;&#xd;
		}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/userProfile/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assigned User Login(COMPLETE_APPLICATION)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;password&quot;: &quot;abc&quot;,&#xd;
		&quot;userId&quot;: &quot;${assignedToUser4}&quot;&#xd;
		}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/los-ci-rest-services/rest/userProfile/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\Automation\MBL-RPA\Jmeter\Simplee Data Writer.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\Automation\MBL-RPA\Jmeter\New Microsoft Excel Worksheet.csv</stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
